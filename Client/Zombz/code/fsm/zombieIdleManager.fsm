/*%FSM<COMPILE "E:\SteamLibrary\Steam\steamapps\common\Arma 3 Tools\FSMEditor\scriptedFSM.cfg, ZombieIdleManager">*/
/*%FSM<HEAD>*/
/*
item0[] = {"Init",0,250,1125.000000,900.000000,1225.000000,950.000000,0.000000,"Init"};
item1[] = {"Client",4,218,1125.000000,975.000000,1225.000000,1025.000000,0.000000,"Client"};
item2[] = {"Not_Client",4,218,1250.000000,900.000000,1350.000000,950.000000,0.000000,"Not-Client"};
item3[] = {"Calculate_All_Zo",2,4346,1125.000000,1050.000000,1225.000000,1100.000000,0.000000,"Calculate" \n "All" \n "Zombies"};
item4[] = {"End",1,250,1250.000000,975.000000,1350.000000,1025.000000,0.000000,"End"};
item5[] = {"Timeout",4,218,1125.000000,1125.000000,1225.000000,1175.000000,0.000000,"Timeout"};
item6[] = {"_",4,218,1250.000000,1050.000000,1350.000000,1100.000000,0.000000,""};
link0[] = {0,1};
link1[] = {0,2};
link2[] = {1,3};
link3[] = {2,4};
link4[] = {3,5};
link5[] = {3,6};
link6[] = {5,3};
link7[] = {6,4};
globals[] = {0.000000,0,0,0,0,640,480,2,11,6316128,1,1047.372437,1347.868042,1267.975342,916.953857,791,924,1};
window[] = {2,-1,-1,-1,-1,822,156,1306,156,3,809};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "ZombieIdleManager";
        class States
        {
                /*%FSM<STATE "Init">*/
                class Init
                {
                        name = "Init";
                        itemno = 0;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Not_Client">*/
                                class Not_Client
                                {
                                        itemno = 2;
                                        priority = 0.000000;
                                        to="End";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(hasInterface)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Client">*/
                                class Client
                                {
                                        itemno = 1;
                                        priority = 0.000000;
                                        to="Calculate_All_Zo";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"hasInterface"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Calculate_All_Zo">*/
                class Calculate_All_Zo
                {
                        name = "Calculate_All_Zo";
                        itemno = 3;
                        init = /*%FSM<STATEINIT""">*/"""Checking idle zombies"" call SM_util_log;" \n
                         "" \n
                         "SM_IdleZombies apply" \n
                         "{" \n
                         "	private _return = _x;" \n
                         "	private _zombie = objectFromNetID _x; " \n
                         "" \n
                         "	switch (true) do" \n
                         "	{" \n
                         "		case (isNull _zombie): { _return = """"; };" \n
                         "		case (!alive _zombie): { _return = """"; };" \n
                         "		case (!local _zombie):" \n
                         "		{" \n
                         "			""Zombie not local and is in idle zombies? attempting to update locality to you!"" call SM_util_log;" \n
                         "" \n
                         "			_zombie setVariable [""SM_LastTargetCheck"", nil];" \n
                         "			_zombie setVariable [""SM_ZombieSoundDelayMoan"", nil];" \n
                         "			private _firedEVH = _zombie getVariable [""SM_ZombieOnFiredEVH"", -1];" \n
                         "			if !(_firedEVH isEqualTo -1) then" \n
                         "			{" \n
                         "				_zombie removeEventHandler [""FiredNear"", _firedEVH];" \n
                         "				_zombie setVariable [""SM_ZombieOnFiredEVH"", nil];" \n
                         "			};" \n
                         "" \n
                         "			[""UpdateLocality"",[_zombie, (netID player)]] call SM_Network_SendMessage;" \n
                         "			_return = """";" \n
                         "		};" \n
                         "		default" \n
                         "		{" \n
                         "			//Check if the zombie still has the fired eventhandler, if not add it if it's enabled." \n
                         "			if (SM_FiredNearEVHEnabled && {(_zombie getVariable [""SM_ZombieOnFiredEVH"", -1]) isEqualTo -1}) then" \n
                         "			{" \n
                         "				private _evhID = _zombie addEventHandler [""FiredNear"",{ _this call SM_FiredNear }];" \n
                         "				_zombie setVariable [""SM_ZombieOnFiredEVH"", _evhID];" \n
                         "			};" \n
                         "" \n
                         "			//Check the last time the zombie moaned." \n
                         "			if ((diag_ticktime - (_zombie getVariable [""SM_ZombieSoundDelayMoan"", 0])) >= SM_ZombieSoundDelayMoan) then" \n
                         "			{" \n
                         "				private _moan = selectRandom SM_MoanArray;" \n
                         "				[_zombie, _moan] remoteExecCall [""SM_Say3D"", -2];" \n
                         "				_zombie setVariable [""SM_ZombieSoundDelayMoan"", diag_ticktime];" \n
                         "			};" \n
                         "" \n
                         "			//Check the last time the zombie looked for a target." \n
                         "			if ((diag_ticktime - (_zombie getVariable [""SM_LastTargetCheck"", 0])) >= SM_ZombieIdleDelay) then" \n
                         "			{" \n
                         "				private _target = _zombie call SM_ZombieFindTarget;" \n
                         "" \n
                         "				//Couldn't find a target" \n
                         "				if (isNull _target) then" \n
                         "				{" \n
                         "					//Maybe someone has shot a weapon near the zombie?" \n
                         "					if !((_zombie getVariable [""SM_ZombieFindFiredNear"",[]]) isEqualTo []) then" \n
                         "					{" \n
                         "						private _pos = _zombie call SM_ZombieFindFiredNear;" \n
                         "						if !(_pos isEqualTo []) then" \n
                         "						{" \n
                         "							_zombie doMove _pos;" \n
                         "							_zombie setVariable [""SM_LastTargetCheck"", diag_ticktime];" \n
                         "						};" \n
                         "					};" \n
                         "				}" \n
                         "				else" \n
                         "				{" \n
                         "					//Check if the locality owner is the target" \n
                         "					if (_target == player) then" \n
                         "					{" \n
                         "						private _isRunning = _zombie getVariable [""SM_FSMRunning"", -1];" \n
                         "						if (_isRunning isEqualTo -1) then" \n
                         "						{" \n
                         "							""Creating an FSM for an zombie."" call SM_Util_Log;" \n
                         "							private _zombieHandle = [_zombie, _target] execFSM SM_FSM_BrainPath;" \n
                         "							_zombie setVariable [""SM_FSMRunning"", _zombieHandle];" \n
                         "							_zombie setVariable [""SM_AlreadyRunning"", (getPlayerUID player), true];" \n
                         "							_zombie setVariable [""SM_LastTargetCheck"", diag_ticktime];" \n
                         "							_zombie setVariable [""SM_ZombieSoundDelayMoan"", nil];" \n
                         "							_zombie setVariable [""SM_LastLocalCheck"", nil];" \n
                         "							_zombie = """";" \n
                         "						};" \n
                         "					}" \n
                         "					else" \n
                         "					{" \n
                         "						//Check to make sure the target is a player." \n
                         "						if (isPlayer _target) then" \n
                         "						{" \n
                         "							[""passZombie"",[(netID _target),(netID _zombie)]] call SM_Network_SendMessage;" \n
                         "							_zombie setVariable [""SM_LastTargetCheck"", nil];" \n
                         "							_zombie setVariable [""SM_ZombieSoundDelayMoan"", nil];" \n
                         "							private _firedEVH = _zombie getVariable [""SM_ZombieOnFiredEVH"", -1];" \n
                         "							if !(_firedEVH isEqualTo -1) then" \n
                         "							{" \n
                         "								_zombie removeEventHandler [""FiredNear"", _firedEVH];" \n
                         "								_zombie setVariable [""SM_ZombieOnFiredEVH"", nil];" \n
                         "							};" \n
                         "							_zombie = """";						" \n
                         "						}" \n
                         "						else" \n
                         "						{" \n
                         "							private _pos = [_zombie, _target] call SM_ZombieFindPositionTarget;" \n
                         "							if !(_pos isEqualTo []) then" \n
                         "							{" \n
                         "								_zombie doMove _pos;" \n
                         "								_zombie setVariable [""SM_LastTargetCheck"", diag_ticktime];" \n
                         "							};" \n
                         "						};" \n
                         "					};" \n
                         "				};" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "" \n
                         "	_zombie" \n
                         "};" \n
                         "" \n
                         "SM_IdleZombies = SM_IdleZombies - [""""];" \n
                         "" \n
                         """Idle zombies check finished"" call SM_util_log;" \n
                         "" \n
                         "_timeout = diag_tickTime;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "_">*/
                                class _
                                {
                                        itemno = 6;
                                        priority = 0.000000;
                                        to="End";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(SM_IdleZombies isEqualTo [])"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Timeout">*/
                                class Timeout
                                {
                                        itemno = 5;
                                        priority = 0.000000;
                                        to="Calculate_All_Zo";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(diag_ticktime - _timeout) >= 1.5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "End">*/
                class End
                {
                        name = "End";
                        itemno = 4;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="Init";
        finalStates[] =
        {
                "End",
        };
};
/*%FSM</COMPILE>*/